accuracy_logit
# Linear SVM Model
linear_svm_model <- svm(survived ~ pclass + age + fare + parch, data = train, kernel = "linear")
linear_svm_labels <- predict(linear_svm_model, test)
# Ensure that lengths of both vectors match
cat("Length of linear_svm_labels:", length(linear_svm_labels), "\n")
cat("Length of test$survived:", length(test$survived), "\n")
# Create confusion matrix if lengths match
if (length(linear_svm_labels) == length(test$survived)) {
confusion_matrix_linear <- table(predicted = linear_svm_labels, actual = test$survived)
accuracy_linear <- sum(diag(confusion_matrix_linear)) / sum(confusion_matrix_linear)
cat("Linear SVM Model Accuracy:", accuracy_linear, "\n")
print(confusion_matrix_linear)
} else {
cat("Error: Lengths of prediction and actual labels do not match.\n")
}
# Polynomial SVM Model
poly_svm_model <- svm(survived ~ pclass + age + fare + parch, data = train, kernel = "polynomial", degree = 2)
poly_svm_labels <- predict(poly_svm_model, test)
# Ensure that lengths of both vectors match
cat("Length of poly_svm_labels:", length(poly_svm_labels), "\n")
cat("Length of test$survived:", length(test$survived), "\n")
# Create confusion matrix if lengths match
if (length(poly_svm_labels) == length(test$survived)) {
confusion_matrix_poly <- table(predicted = poly_svm_labels, actual = test$survived)
accuracy_poly <- sum(diag(confusion_matrix_poly)) / sum(confusion_matrix_poly)
cat("Polynomial SVM Model Accuracy:", accuracy_poly, "\n")
print(confusion_matrix_poly)
} else {
cat("Error: Lengths of prediction and actual labels do not match.\n")
}
# Output the better performing model's accuracy and confusion matrix
if (exists("accuracy_linear") && exists("accuracy_poly")) {
if (accuracy_linear > accuracy_poly) {
cat("Linear SVM Model is better with accuracy:", accuracy_linear, "\n")
cat("Confusion Matrix:\n")
print(confusion_matrix_linear)
} else {
cat("2nd Degree Polynomial SVM Model is better with accuracy:", accuracy_poly, "\n")
cat("Confusion Matrix:\n")
print(confusion_matrix_poly)
}
} else {
cat("Error: Could not compare model accuracies due to mismatched lengths.\n")
}
library(e1071)
titanic$survived <- as.factor(titanic$survived)
titanic$pclass <- as.factor(titanic$pclass)
split <- sample(c("train", "test"), nrow(titanic), replace = TRUE, prob = c(0.8, 0.2))
train <- titanic[split == "train", ]
test <- titanic[split == "test", ]
logit_train <- glm(survived ~ pclass + age + fare + parch, family = "binomial", data = train)
summary(logit_train)
probabilities <- predict(logit_train, test, type = "response")
predicted_class <- ifelse(probabilities > 0.4, 1, 0)
confusion_matrix_logit <- table(test$survived, predicted_class)
confusion_matrix_logit
accuracy_logit <- (confusion_matrix_logit[1, 1] + confusion_matrix_logit[2, 2]) / sum(confusion_matrix_logit)
accuracy_logit
linear_svm_model <- svm(survived ~ pclass + age + fare + parch, data = train, kernel = "linear")
linear_svm_labels <- predict(linear_svm_model, test)
poly_svm_model <- svm(survived ~ pclass + age + fare + parch, data = train, kernel = "polynomial", degree = 2)
poly_svm_labels <- predict(poly_svm_model, test)
accuracy_svm_linear <- sum(linear_svm_labels == test$survived) / length(test$survived)
accuracy_svm_poly <- sum(poly_svm_labels == test$survived) / length(test$survived)
accuracy_svm_linear
linear_svm_model <- svm(survived ~ pclass + age + fare + parch, data = train, kernel = "linear")
linear_svm_labels <- predict(linear_svm_model, test)
poly_svm_model <- svm(survived ~ pclass + age + fare + parch, data = train, kernel = "polynomial", degree = 2)
poly_svm_labels <- predict(poly_svm_model, test)
accuracy_svm_linear <- sum(linear_svm_labels == test$survived) / length(test$survived)
accuracy_svm_poly <- sum(poly_svm_labels == test$survived) / length(test$survived)
accuracy_svm_linear
accuracy_svm_poly
confusion_matrix_linear <- table(predicted = linear_svm_labels, actual = test$survived)
confusion_matrix_linear <- table(predicted = linear_svm_labels, actual = test$survived)
confusion_matrix_linear
confusion_matrix_linear <- table(predicted = linear_svm_labels, actual = test$survived)
confusion_matrix_linear
confusion_matrix_poly <- table(predicted = poly_svm_labels, actual = test$survived)
confusion_matrix_poly
accuracy_svm_linear <- sum(linear_svm_labels == test$survived) / length(test$survived)
accuracy_svm_poly <- sum(poly_svm_labels == test$survived) / length(test$survived)
accuracy_svm_linear
accuracy_svm_poly
confusion_matrix_linear <- table(predicted = linear_svm_labels, actual = test$survived)
confusion_matrix_poly <- table(predicted = poly_svm_labels, actual = test$survived)
confusion_matrix_linear
confusion_matrix_poly
library(readxl)
default_of_credit_card_clients <- read_excel("Desktop/INFO180/groupAssignment/default of credit card clients.xls")
View(default_of_credit_card_clients)
library(ggplot2)
library(ggplot2)
df$SEX <- as.factor(df$SEX)
View(default_of_credit_card_clients)
library(ggplot2)
dataset <- read.csv("default of credit card clients.xls")
install.packages("readxl")
library(ggplot2)
dataset <- read.csv("default of credit card clients.xls")
install.packages("readxl")
library(readr)
default_of_credit_card_clients <- read_csv("Desktop/INFO180/groupAssignment/default of credit card clients.csv")
View(default_of_credit_card_clients)
setwd("~/Desktop/INFO180/groupAssignment")
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(dataset)
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(dataset)
str(dataset)
summary(dataset)
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
summary(dataset)
View(default_of_credit_card_clients)
View(dataset)
library(readxl)
default_of_credit_card_clients <- read_excel("default of credit card clients.xls")
View(default_of_credit_card_clients)
head(df)
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(df)
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(dataset)
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(dataset)
missing_values <- sum(is.na(dataset))
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(dataset)
missing_values <- sum(is.na(dataset))
print(missing_values)
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(dataset)
# Check to see if there are any missing values
missing_values <- sum(is.na(dataset))
print(missing_values)
dataset$SEX <- as.factor(dataset$SEX)
rm(list=ls())
library(readr)
default_of_credit_card_clients <- read_csv("default of credit card clients.csv")
View(default_of_credit_card_clients)
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(dataset)
# Check to see if there are any missing values
missing_values <- sum(is.na(dataset))
print(missing_values)
dataset$SEX <- as.factor(dataset$SEX)
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(dataset)
# Check to see if there are any missing values
missing_values <- sum(is.na(dataset))
print(missing_values)
# Remove missing values
dataset_clean <- na.omit(dataset)
dataset$SEX <- as.factor(dataset$SEX)
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.csv")
head(dataset)
# Check to see if there are any missing values
missing_values <- sum(is.na(dataset))
print(missing_values)
# Remove missing values
dataset_clean <- na.omit(dataset)
check_values <- sum(is.na(dataset))
print(check_values)
dataset$SEX <- as.factor(dataset$SEX)
rm(list=ls())
library(readxl)
default_of_credit_card_clients <- read_excel("default of credit card clients.xls")
View(default_of_credit_card_clients)
install.packages("readxl")
library(readxl)
install.packages("readxl")
library(readxl)
install.packages("readxl")
library(readxl)
dataset <- read_excel("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.xls")
install.packages("readxl")
library(readxl)
dataset <- read_excel("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.xls")
summary(dataset)
colnames(dataset)
install.packages("readxl")
library(readxl)
dataset <- read_excel("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.xls")
colnames(dataset)
colnames(dataset) c("Limit_Bal", "Sex", "Education", "Marriage", "Age", "Pay_0",
install.packages("readxl")
library(readxl)
dataset <- read_excel("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.xls")
colnames(dataset)
colnames(dataset) <- c("Limit_Bal", "Sex", "Education", "Marriage", "Age", "Pay_0",
"Pay_2", "Pay_3", "Pay_4", "Pay_5", "Pay_6", "Bill_Amt1", "Bill_Amt2",
"Bill_Amt3", "Bill_Amt4", "Bill_Amt5", "Bill_Amt6", "Pay_Amt1", "Pay_Amt2",
"Pay_Amt3", "Pay_Amt4", "Pay_Amt5", "Pay_Amt6", "Default_Pay")
summary(dataset)
dataset$Sex <- as.factor(dataset$Sex)
# Converting to proper variab;es
dataset$Sex <- as.factor(dataset$Sex)
dataset$Education <- as.factor(dataset$Education)
dataset$Marriage <- as.factor(dataset$Marriage)
dataset$Limit_bal <- scale(dataset$Limit_bal)
summary(dataset)
install.packages("readxl")
library(readxl)
dataset <- read_excel("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.xls")
# Renaming Columns for better conventions
colnames(dataset)
colnames(dataset) <- c("Limit_Bal", "Sex", "Education", "Marriage", "Age", "Pay_0",
"Pay_2", "Pay_3", "Pay_4", "Pay_5", "Pay_6", "Bill_Amt1", "Bill_Amt2",
"Bill_Amt3", "Bill_Amt4", "Bill_Amt5", "Bill_Amt6", "Pay_Amt1", "Pay_Amt2",
"Pay_Amt3", "Pay_Amt4", "Pay_Amt5", "Pay_Amt6", "Default_Pay")
summary(dataset)
# Converting to proper variables
dataset$Sex <- as.factor(dataset$Sex)
dataset$Education <- as.factor(dataset$Education)
dataset$Marriage <- as.factor(dataset$Marriage)
summary(dataset)
dataset <- dataset %>%
mutate(
Limit_Bal = as.numeric(Limit_Bal),
Sex = as.factor(Sex),
Education = as.factor(Education),
Marriage = as.factor(Marriage),
Age = as.numeric(Age),
Pay_0 = as.numeric(Pay_0),
Pay_2 = as.numeric(Pay_2),
Pay_3 = as.numeric(Pay_3),
Pay_4 = as.numeric(Pay_4),
Pay_5 = as.numeric(Pay_5),
Pay_6 = as.numeric(Pay_6),
Bill_Amt1 = as.numeric(Bill_Amt1),
Bill_Amt2 = as.numeric(Bill_Amt2),
Bill_Amt3 = as.numeric(Bill_Amt3),
Bill_Amt4 = as.numeric(Bill_Amt4),
Bill_Amt5 = as.numeric(Bill_Amt5),
Bill_Amt6 = as.numeric(Bill_Amt6),
Pay_Amt1 = as.numeric(Pay_Amt1),
Pay_Amt2 = as.numeric(Pay_Amt2),
Pay_Amt3 = as.numeric(Pay_Amt3),
Pay_Amt4 = as.numeric(Pay_Amt4),
Pay_Amt5 = as.numeric(Pay_Amt5),
Pay_Amt6 = as.numeric(Pay_Amt6),
Default_Payment_Next_Month = as.factor(Default_Payment_Next_Month)
)
install.packages("readxl")
View(dataset)
str(dataset)
# Converting to proper variables
dataset$Limit_Bal <- as.numeric(Limit_Bal)
install.packages("readxl")
library(readxl)
dataset <- read_excel("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.xls")
# Renaming Columns for better conventions
colnames(dataset)
colnames(dataset) <- c("Limit_Bal", "Sex", "Education", "Marriage", "Age", "Pay_0",
"Pay_2", "Pay_3", "Pay_4", "Pay_5", "Pay_6", "Bill_Amt1", "Bill_Amt2",
"Bill_Amt3", "Bill_Amt4", "Bill_Amt5", "Bill_Amt6", "Pay_Amt1", "Pay_Amt2",
"Pay_Amt3", "Pay_Amt4", "Pay_Amt5", "Pay_Amt6", "Default_Pay")
summary(dataset)
# Converting to proper variables
dataset$Limit_Bal <- as.numeric(Limit_Bal)
install.packages("readxl")
dataset$Sex <- as.factor(dataset$Sex)
dataset$Age <- as.numeric(Age)
dataset$Pay_0 <- as.numeric(Pay_0)
dataset$Pay_5 <- as.numeric(Pay_5)
rm(list = ls())
library(readxl)
default_of_credit_card_clients <- read_excel("default of credit card clients.xls")
View(default_of_credit_card_clients)
dataset <- read_excel("/Users/laurxntra/Desktop/INFO180/groupAssignment/default of credit card clients.xls")
library(readxl)
head(dataset)
colnames(dataset) <- c("ID", "Limit_Bal", "Sex", "Education", "Marriage", "Age",
"Pay_0", "Pay_2", "Pay_3", "Pay_4", "Pay_5", "Pay_6",
"Bill_Amt1", "Bill_Amt2", "Bill_Amt3", "Bill_Amt4",
"Bill_Amt5", "Bill_Amt6", "Pay_Amt1", "Pay_Amt2",
"Pay_Amt3", "Pay_Amt4", "Pay_Amt5", "Pay_Amt6",
"Default_Payment_Next_Month"
)
colnames(dataset)
head(dataset)
dataset <- dataset %>%
slice(-1)
dataset <- dataset[-1, ]
head(dataset)
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
View(dataset)
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
dataset$Limit_Bal <- as.numeric(dataset$LIMIT_BAL)
dataset$Limit_Bal <- as.numeric(dataset$Limit_Bal)
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
# Rename columns to appropriate naming conventions
colnames(dataset) <- c("ID", "Limit_Bal", "Sex", "Education", "Marriage", "Age",
"Pay_1", "Pay_2", "Pay_3", "Pay_4", "Pay_5", "Pay_6",
"Bill_Amt1", "Bill_Amt2", "Bill_Amt3", "Bill_Amt4",
"Bill_Amt5", "Bill_Amt6", "Pay_Amt1", "Pay_Amt2",
"Pay_Amt3", "Pay_Amt4", "Pay_Amt5", "Pay_Amt6",
"Default_Payment_Next_Month")
colnames(dataset)
# Convert columns to appropriate data types
dataset$Limit_Bal <- as.numeric(dataset$Limit_Bal)
dataset$Sex <- as.factor(dataset$Sex)
dataset$Education <- as.factor(dataset$Education)
dataset$Marriage <- as.factor(dataset$Marriage)
dataset$Age <- as.numeric(dataset$Age)
dataset$Pay_1 <- as.numeric(dataset$Pay_1)
dataset$Pay_2 <- as.numeric(dataset$Pay_2)
dataset$Pay_3 <- as.numeric(dataset$Pay_3)
dataset$Pay_4 <- as.numeric(dataset$Pay_4)
dataset$Pay_5 <- as.numeric(dataset$Pay_5)
dataset$Pay_6 <- as.numeric(dataset$Pay_6)
dataset$Bill_Amt1 <- as.numeric(dataset$Bill_Amt1)
dataset$Bill_Amt2 <- as.numeric(dataset$Bill_Amt2)
dataset$Bill_Amt3 <- as.numeric(dataset$Bill_Amt3)
dataset$Bill_Amt4 <- as.numeric(dataset$Bill_Amt4)
dataset$Bill_Amt5 <- as.numeric(dataset$Bill_Amt5)
dataset$Bill_Amt6 <- as.numeric(dataset$Bill_Amt6)
dataset$Pay_Amt1 <- as.numeric(dataset$Pay_Amt1)
dataset$Pay_Amt2 <- as.numeric(dataset$Pay_Amt2)
dataset$Pay_Amt3 <- as.numeric(dataset$Pay_Amt3)
dataset$Pay_Amt4 <- as.numeric(dataset$Pay_Amt4)
dataset$Pay_Amt5 <- as.numeric(dataset$Pay_Amt5)
dataset$Pay_Amt6 <- as.numeric(dataset$Pay_Amt6)
dataset$Default_Payment_Next_Month <- as.factor(dataset$`Default_Payment_Next_Month`)
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
str(dataset)
dataset$Default_Payment_Next_Month <- as.factor(dataset$Default_Payment_Next_Month)
str(dataset)
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
library(MASS)
full_logit_model <- glm(Default_Payment_Next_Month ~ Limit_Bal + Sex + Education +
Marriage + Age + Pay_0 + Pay_2 + Pay_3 + Pay_4 +
Pay_5 + Pay_6 + Bill_Amt1 + Bill_Amt2 + Bill_Amt3 + Bill_Amt4 +
Bill_Amt5 + Bill_Amt6 + Pay_Amt1 + Pay_Amt2 + Pay_Amt3 + Pay_Amt4 +
Pay_Amt5 + Pay_Amt6, family = binomial(link = "logit"), data = dataset)
full_logit_model <- glm(Default_Payment_Next_Month ~ Limit_Bal + Sex + Education +
Marriage + Age + Pay_1 + Pay_2 + Pay_3 + Pay_4 +
Pay_5 + Pay_6 + Bill_Amt1 + Bill_Amt2 + Bill_Amt3 + Bill_Amt4 +
Bill_Amt5 + Bill_Amt6 + Pay_Amt1 + Pay_Amt2 + Pay_Amt3 + Pay_Amt4 +
Pay_Amt5 + Pay_Amt6, family = binomial(link = "logit"), data = dataset)
summary(full_logit_model)
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
# Probit regression model of entire dataset
probit_model <- glm(Default_Payment_Next_Month ~ Limit_Bal + Education + Age + Pay_0 + Pay_2 + Pay_3 + Pay_4 + Pay_5 + Pay_6,
family = binomial(link = "probit"), data = dataset)
# Probit regression model of entire dataset
probit_model <- glm(Default_Payment_Next_Month ~ Limit_Bal + Education + Age + Pay_1 + Pay_2 + Pay_3 + Pay_4 + Pay_5 + Pay_6,
family = binomial(link = "probit"), data = dataset)
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
probit_model <- glm(Default_Payment_Next_Month ~ Limit_Bal + Education + Age + Pay_1 + Pay_2 + Pay_3 + Pay_4 + Pay_5 + Pay_6,
family = binomial(link = "probit"), data = dataset)
summary(probit_model)
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
full_probit_model <- glm(Default_Payment_Next_Month ~ Limit_Bal + Sex + Education + Marriage +
Age + Pay_1 + Pay_2 + Pay_3 + Pay_4 + Pay_5 + Pay_6 + Bill_Amt1 +
Bill_Amt2 + Bill_Amt3 + Bill_Amt4 + Bill_Amt5 + Bill_Amt6 + Pay_Amt1 +
Pay_Amt2 + Pay_Amt3 + Pay_Amt4 + Pay_Amt5 + Pay_Amt6,
family = binomial(link = "probit"), data = dataset)
summary(full_probit_model)
summary(full_logit_model)
summary(full_probit_model)
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
summary(full_logit_model)
summary(full_probit_model)
# classification package
install.packages("class")
# decision tree package
install.packages("party")
rm(list=ls())
setwd("~/Downloads")
setwd("~/Downloads")
setwd("~/Desktop/INFO180/groupAssignment")
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
dataset <- read_csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/credit_dataset_CSV.csv")
dataset <- read.csv("/Users/laurxntra/Desktop/INFO180/groupAssignment/credit_dataset_CSV.csv")
View(dataset)
View(dataset)
summary(dataset)
credit_dataset_CSV$EDUCATION = as.factor(credit_dataset_CSV$EDUCATION)
dataset$EDUCATION = as.factor(dataset$EDUCATION)
dataset$SEX = as.factor(dataset$SEX)
dataset$MARRIAGE = as.factor(dataset$MARRIAGE)
dataset$PAY_0 = as.factor(dataset$PAY_0)
dataset$PAY_2 = as.factor(dataset$PAY_2)
dataset$PAY_3 = as.factor(dataset$PAY_3)
dataset$PAY_4 = as.factor(dataset$PAY_4)
dataset$PAY_5 = as.factor(dataset$PAY_5)
dataset$PAY_6 = as.factor(dataset$PAY_6)
View(dataset)
str(dataset)
full_logit_model <- glm(Default_Payment_Next_Month ~ Limit_Bal + Sex + Education +
Marriage + Age + Pay_1 + Pay_2 + Pay_3 + Pay_4 +
Pay_5 + Pay_6 + Bill_Amt1 + Bill_Amt2 + Bill_Amt3 + Bill_Amt4 +
Bill_Amt5 + Bill_Amt6 + Pay_Amt1 + Pay_Amt2 + Pay_Amt3 + Pay_Amt4 +
Pay_Amt5 + Pay_Amt6, family = binomial(link = "logit"), data = dataset)
full_logit_model <- glm(default.payment.next.month ~ Limit_Bal + Sex + Education +
Marriage + Age + Pay_1 + Pay_2 + Pay_3 + Pay_4 +
Pay_5 + Pay_6 + Bill_Amt1 + Bill_Amt2 + Bill_Amt3 + Bill_Amt4 +
Bill_Amt5 + Bill_Amt6 + Pay_Amt1 + Pay_Amt2 + Pay_Amt3 + Pay_Amt4 +
Pay_Amt5 + Pay_Amt6, family = binomial(link = "logit"), data = dataset)
full_logit_model <- glm(default.payment.next.month ~ LIMIT_BAL + SEX + EDUCATION +
MARRIAGE + AGE + PAY_0 + PAY_2 + PAY_3 + PAY_4 +
PAY_5 + PAY_6 + BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 +
BILL_AMT5 + BILL_AMT6 + PAY_AMT1 + PAY_AMT2 + PAY_AMT3 + PAY_AMT4 +
PAY_AMT5 + PAY_AMT6, family = binomial(link = "logit"), data = dataset)
summary(full_logit_model)
full_logit_model <- glm(Default_Payment_Next_Month ~ Limit_Bal + Sex + Education +
Marriage + Age + Pay_1 + Pay_2 + Pay_3 + Pay_4 +
Pay_5 + Pay_6 + Bill_Amt1 + Bill_Amt2 + Bill_Amt3 + Bill_Amt4 +
Bill_Amt5 + Bill_Amt6 + Pay_Amt1 + Pay_Amt2 + Pay_Amt3 + Pay_Amt4 +
Pay_Amt5 + Pay_Amt6, family = binomial(link = "logit"), data = dataset)
full_logit_model <- glm(default.payment.next.month ~ LIMIT_BAL + SEX + EDUCATION +
MARRIAGE + AGE + PAY_0 + PAY_2 + PAY_3 + PAY_4 +
PAY_5 + PAY_6 + BILL_AMT1 + BILL_AMT2 + BILL_AMT3 + BILL_AMT4 +
BILL_AMT5 + BILL_AMT6 + PAY_AMT1 + PAY_AMT2 + PAY_AMT3 + PAY_AMT4 +
PAY_AMT5 + PAY_AMT6, family = binomial(link = "logit"), data = dataset)
summary(full_logit_model)
logit_model = glm(default.payment.next.month~PAY_0+ PAY_2+PAY_3+EDUCATION+LIMIT_BAL+BILL_AMT1,
family="binomial",data=credit_dataset_CSV)
logit_model = glm(default.payment.next.month~PAY_0+ PAY_2+PAY_3+EDUCATION+LIMIT_BAL+BILL_AMT1,
family="binomial",data=dataset)
summary(logit_model)
probit_model = glm(default.payment.next.month~PAY_0+ PAY_2+PAY_3+EDUCATION+LIMIT_BAL+BILL_AMT1,
family="binomial",(link-"probit")data=dataset)
probit_model = glm(default.payment.next.month~PAY_0+ PAY_2+PAY_3+EDUCATION+LIMIT_BAL+BILL_AMT1,
family="binomial"(link-"probit"), data=dataset)
probit_model = glm(default.payment.next.month~PAY_0+ PAY_2+PAY_3+EDUCATION+LIMIT_BAL+BILL_AMT1,
family="binomial"(link="probit"), data=dataset)
summary(logit_model)
# regression analysis - outcome default
logit_model = glm(default.payment.next.month~PAY_0+ PAY_2+PAY_3+EDUCATION+LIMIT_BAL+BILL_AMT1,
family="binomial",data=dataset)
summary(logit_model)
# repeat for probit; try different models too Y~X1+X2+X3+...
probit_model = glm(default.payment.next.month~PAY_0+ PAY_2+PAY_3+EDUCATION+LIMIT_BAL+BILL_AMT1,
family="binomial"(link="probit"), data=dataset)
summary(logit_model)
logit_model = glm(default.payment.next.month~LIMIT_BAL+ PAY_0+EDUCATION+AGE,
family="binomial",data=dataset)
summary(logit_model)
# regression analysis - outcome default
logit_model = glm(default.payment.next.month~LIMIT_BAL+ PAY_0+PAY_2+PAY_3+PAY_4+PAY_5+PAY_6+EDUCATION+AGE,
family="binomial",data=dataset)
summary(logit_model)
logit_model = glm(default.payment.next.month~LIMIT_BAL+ PAY_0+PAY_2+PAY_3+PAY_4+PAY_5+PAY_6+EDUCATION+SEX,
family="binomial",data=dataset)
summary(logit_model)
logit_model = glm(default.payment.next.month~LIMIT_BAL+ PAY_0+PAY_2+PAY_3+PAY_4+PAY_5+PAY_6+EDUCATION+AGE,
family="binomial",data=dataset)
summary(logit_model)
# regression analysis - outcome default
logit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_1+EDUCATION,
family="binomial",data=dataset)
logit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_0+EDUCATION,
family="binomial",data=dataset)
summary(logit_model)
# repeat for probit; try different models too Y~X1+X2+X3+...
probit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_0+EDUCATION,
family="binomial"(link="probit"), data=dataset)
summary(logit_model)
logit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_0+EDUCATION,
family="binomial",data=dataset)
summary(logit_model)
probit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_0+EDUCATION,
family="binomial"(link="probit"), data=dataset)
summary(logit_model)
probit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_1+EDUCATION,
family="binomial"(link="probit"), data=dataset)
probit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_0+EDUCATION,
family="binomial"(link="probit"), data=dataset)
summary(logit_model)
probit_model = glm(default.payment.next.month~LIMIT_BAL+PAY_1+PAY_2+PAY_AMT1+SEX,
family="binomial"(link="probit"), data=dataset)
probit_model = glm(default.payment.next.month~LIMIT_BAL+PAY_0+PAY_2+PAY_AMT1+SEX,
family="binomial"(link="probit"), data=dataset)
summary(probit_model)
probit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_0+EDUCATION,
family="binomial"(link="probit"), data=dataset)
summary(probit_model)
probit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_0+SEX,
family="binomial"(link="probit"), data=dataset)
summary(probit_model)
install.packages("caret")
install.packages("e1071")
install.packages("e1071")
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_1-1 + PAY_11 + PAY_12+ PAY_13+ PAY60 + AGE, data = trine, kernel = "linear")
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_1-1 + PAY_11 + PAY_12+ PAY_13+ PAY60 + AGE, data = trine, kernel = "linear")
install.packages("e1071")
install.packages("e1071")
library(e1071)
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_1-1 + PAY_11 + PAY_12+ PAY_13+ PAY60 + AGE, data = trine, kernel = "linear")
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_1-1 + PAY_11 + PAY_12+ PAY_13+ PAY60 + AGE, data = train, kernel = "linear")
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_1-1 + PAY_11 + PAY_12+ PAY_13+ PAY60 + AGE, data = dataset, kernel = "linear")
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_0-1 + PAY_11 + PAY_12+ PAY_13+ PAY60 + AGE, data = dataset, kernel = "linear")
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_0-1 + PAY_11 + PAY_12+ PAY_13+ PAY60 + AGE, data = dataset, kernel = "linear")
# repeat for probit; try different models too Y~X1+X2+X3+...
probit_model = glm(default.payment.next.month~LIMIT_BAL+AGE+PAY_0+SEX,
family="binomial"(link="probit"), data=dataset)
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_0 + PAY_11 + PAY_12+ PAY_13+ PAY60 + AGE, data = dataset, kernel = "linear")
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_0 + PAY_1 + AGE, data = dataset, kernel = "linear")
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_0 + PAY_2 + AGE, data = dataset, kernel = "linear")
linear_svm_model <- svm(default.payment.next.month ~ LIMIT_BAL + PAY_0 + PAY_2 + AGE, data = dataset, kernel = "linear")
linear_svm_labels <- predict(linear_svm_model, test)
install.packages("class")
install.packages("class")
source("~/Desktop/INFO180/groupAssignment/groupAssignment.R")
